@model IEnumerable<EntityFrameworkExample.Models.Barrel>

@{
    ViewBag.Title = "Inventory";
}
<center>
    <h2 class="secondaryColor">BARREL INVENTORY</h2>
</center>
<p>
    <button type="button" class="linkButton">@Html.ActionLink("Add Barrel", "Create")</button>
</p>

<table class="table" id="barrelInventory">
    <thread>

        <tr>
            <th>
                @Html.ActionLink("Construction Material", "Index", new { sortOrder = ViewBag.ConstructionMaterialSortParm })
            </th>
            <th>
                @Html.ActionLink("Radius", "Index", new { sortOrder = ViewBag.RadiusSortParm})
            </th>
            <th>
                @Html.ActionLink("Height", "Index", new { sortOrder = ViewBag.HeightSortParm})
            </th>
            <th>
                @Html.ActionLink("Current Location", "Index", new { sortOrder = ViewBag.CurrentLocationSortParm })
            </th>
            <th>
                @Html.ActionLink("Contents", "Index", new { sortOrder = ViewBag.ContentsSortParm})
            </th>
            <th>
                @Html.ActionLink("Date Created", "Index", new { sortOrder = ViewBag.DateCreatedSortParm})
            </th>
            <th>
                <input class="searchInput" id='searchBar' onkeyup='searchTable()' type='text' placeholder="Search..." />
            </th>
        </tr>
    </thread>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ConstructionMaterial)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Radius)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Height)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CurrentLocation)
            </td>

            <td>
                <div class="ellipsis">
                    @Html.DisplayFor(modelItem => item.Contents)
                </div>
            </td>


            <td>
                @Html.DisplayFor(modelItem => item.DateCreated)
            </td>
            <td>
                <button type="button" class="linkButton">@Html.ActionLink("Edit", "Edit", new { id = item.Id })</button>
                <button type="button" class="linkButton">@Html.ActionLink("Delete", "Delete", new { id = item.Id })</button>
            </td>
        </tr>
    }

</table>
@section scripts{
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script>

        //searching feature
        jQuery(document).ready(function ($) {
            $(".clickable-row").click(function () {
                window.location = $(this).data("href");
            });
        });
        function searchTable() {
            var input, filter, found, table, tr, td, i, j;
            input = document.getElementById("searchBar");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            trArray = document.getElementsByTagName("tr");
            for (i = 1; i < trArray.length; i++) {
                td = trArray[i].getElementsByTagName("td");
                for (j = 0; j < td.length; j++) {
                    if (td[j].innerHTML.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                    }
                }
                if (found) {
                    if (!($('#mySwitch').is(":checked")) && !($(trArray[i]).hasClass('deleted'))) {
                        trArray[i].style.display = "";
                        found = false;
                    } else if ($('#mySwitch').is(":checked")) {
                        trArray[i].style.display = "";
                        found = false;
                    }

                } else {
                    trArray[i].style.display = "none";
                }

            }

        };

        //pagination feature
        // get the table element
        var $table = document.getElementById("barrelInventory"),
            // number of rows per page
            $n = 5,
            // number of rows of the table
            $rowCount = $table.rows.length,
            // get the first cell's tag name (in the first row)
            $firstRow = $table.rows[0].firstElementChild.tagName,
            // boolean var to check if table has a head row
            $hasHead = ($firstRow === "TH"),
            // an array to hold each row
            $tr = [],
            // loop counters, to start count from rows[1] (2nd row) if the first row has a head tag
            $i, $ii, $j = ($hasHead) ? 1 : 0,
            // holds the first row if it has a (<TH>) & nothing if (<TD>)
            $th = ($hasHead ? $table.rows[(0)].outerHTML : "");
        // count the number of pages
        var $pageCount = Math.ceil($rowCount / $n);
        // if we had one page only, then we have nothing to do ..
        if ($pageCount > 1) {
            // assign each row outHTML (tag name & innerHTML) to the array
            for ($i = $j, $ii = 0; $i < $rowCount; $i++ , $ii++)
                $tr[$ii] = $table.rows[$i].outerHTML;
            // create a div block to hold the buttons
            $table.insertAdjacentHTML("afterend", "<div id='buttons'></div");
            // the first sort, default page is the first one
            sort(1);
        }

        // ($p) is the selected page number. it will be generated when a user clicks a button
        function sort($p) {
            /* create ($rows) a variable to hold the group of rows
            ** to be displayed on the selected page,
            ** ($s) the start point .. the first row in each page, Do The Math
            */
            var $rows = $th, $s = (($n * $p) - $n);
            for ($i = $s; $i < ($s + $n) && $i < $tr.length; $i++)
                $rows += $tr[$i];

            // now the table has a processed group of rows ..
            $table.innerHTML = $rows;
            // create the pagination buttons
            document.getElementById("buttons").innerHTML = pageButtons($pageCount, $p);
            // CSS Stuff
            document.getElementById("id" + $p).setAttribute("class", "active");
        }


        // ($pCount) : number of pages,($cur) : current page, the selected one ..
        function pageButtons($pCount, $cur) {
            /* this variables will disable the "Prev" button on 1st page
               and "next" button on the last one */
            var $prevDis = ($cur == 1) ? "disabled" : "",
                $nextDis = ($cur == $pCount) ? "disabled" : "",
                /* this ($buttons) will hold every single button needed
                ** it will creates each button and sets the onclick attribute
                ** to the "sort" function with a special ($p) number..
                */
                $buttons = "<input type='button' class='paginationButton' value='&lt;&lt; Prev' onclick='sort(" + ($cur - 1) + ")' " + $prevDis + ">";
            for ($i = 1; $i <= $pCount; $i++)
                $buttons += "<input type='button' class='paginationButton' id='id" + $i + "'value='" + $i + "' onclick='sort(" + $i + ")'>";
            $buttons += "<input type='button' class='paginationButton' value='Next &gt;&gt;' onclick='sort(" + ($cur + 1) + ")' " + $nextDis + ">";
            return $buttons;
        }
    </script>

}